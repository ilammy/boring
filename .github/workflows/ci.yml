name: CI

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
      - unify-tests

env:
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        thing:
        - stable
        - macos-x86_64
        - arm-android
        - arm64-android
        - i686-android
        - x86_64-android
        - aarch64-ios
        - aarch64-ios-sim
        - x86_64-ios
        - i686-linux
        - arm-linux
        - aarch64-linux
        - x86_64-musl
        - x86_64-mingw
        - i686-msvc
        - x86_64-msvc
        include:
        - thing: stable
          target: x86_64-unknown-linux-gnu
          rust: stable
          os: ubuntu-latest
          test-type: run
        - thing: macos-x86_64
          target: x86_64-apple-darwin
          rust: stable
          os: macos-latest
          test-type: run

        - thing: arm-android
          target: arm-linux-androideabi
          rust: stable
          os: ubuntu-latest
          test-type: run
        - thing: arm64-android
          target: aarch64-linux-android
          rust: stable
          os: ubuntu-latest
          test-type: run
        - thing: i686-android
          target: i686-linux-android
          rust: stable
          os: ubuntu-latest
          test-type: run
        - thing: x86_64-android
          target: x86_64-linux-android
          rust: stable
          os: ubuntu-latest
          test-type: run

        # It's... theoretically possible to run tests on iPhone Simulator,
        # but for now, make sure that BoringSSL only builds.
        - thing: aarch64-ios
          target: aarch64-apple-ios
          os: macos-latest
          test-type: build-only
        - thing: aarch64-ios-sim
          target: aarch64-apple-ios-sim
          os: macos-latest
          test-type: build-only
        - thing: x86_64-ios
          target: x86_64-apple-ios
          os: macos-latest
          test-type: build-only

        - thing: i686-linux
          target: i686-unknown-linux-gnu
          rust: stable
          os: ubuntu-latest
          test-type: run
        - thing: arm-linux
          target: arm-unknown-linux-gnueabi
          rust: stable
          os: ubuntu-latest
          test-type: run
        - thing: aarch64-linux
          target: aarch64-unknown-linux-gnu
          rust: stable
          os: ubuntu-latest
          test-type: run
        - thing: x86_64-musl
          target: x86_64-unknown-linux-musl
          rust: stable
          os: ubuntu-latest
          test-type: run

        - thing: x86_64-mingw
          target: x86_64-pc-windows-gnu
          rust: stable
          os: ubuntu-latest
          test-type: run
        # CI's Windows doesn't have required root certs,
        # breaking tokio-boring and hyper-boring tests.
        - thing: i686-msvc
          target: i686-pc-windows-msvc
          rust: stable-x86_64-msvc
          os: windows-latest
          test-type: run-without-hyper
        - thing: x86_64-msvc
          target: x86_64-pc-windows-msvc
          rust: stable-x86_64-msvc
          os: windows-latest
          test-type: run-without-hyper

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Install Rust (rustup)
      run: rustup update ${{ matrix.rust }} --no-self-update && rustup default ${{ matrix.rust }}
      shell: bash
    - run: rustup target add ${{ matrix.target }}
    - name: Install nasm
      if: startsWith(matrix.os, 'windows')
      run: choco install nasm
      shell: cmd
    - name: Install LLVM and Clang
      if: startsWith(matrix.os, 'windows')
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "11.0"
        directory: ${{ runner.temp }}/llvm
    - name: Install musl support
      if: contains(matrix.target, 'musl') && startsWith(matrix.os, 'ubuntu')
      run: sudo apt update && sudo apt install musl-tools
    - name: Set LIBCLANG_PATH
      if: startsWith(matrix.os, 'windows')
      run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
    - if: matrix.test-type == 'run-without-hyper'
      run: cargo test --target ${{ matrix.target }} --workspace --exclude tokio-boring --exclude hyper-boring
      name: Run tests (without hyper)
    - if: matrix.test-type == 'run'
      run: cargo test --target ${{ matrix.target }}
      name: Run tests
    - if: matrix.test-type == 'build-only'
      run: cargo test --target ${{ matrix.target }} --no-run
      name: Build tests
